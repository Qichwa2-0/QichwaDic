apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 31

    buildFeatures {
        viewBinding true
        compose true
    }

    defaultConfig {
        applicationId "com.ocram.qichwadic"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 20
        versionName "4.0.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
        buildConfigField "boolean", "DEBUGGABLE", 'false'
        buildConfigField "String", "SERVER_URL", '"https://www.api.qichwa.net/simitaqi/"'
        buildConfigField "String", "DEV_EMAIL", '"qichwa2.0@gmail.com"'
        manifestPlaceholders = [
                appLabel: "@string/app_name",
        ]
    }

    applicationVariants.all { variant ->
        variant.resValue "string", "versionName", "v${variant.versionName}"
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "DEBUGGABLE", 'true'
            minifyEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "default"
    productFlavors {
        dev {
            dimension "default"
            applicationIdSuffix ".compose"
            manifestPlaceholders = [
                    appLabel: "QichwaDic-Compose",
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.0.1'
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }
}

dependencies {

    // Kotlin components
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines"
    implementation "androidx.core:core-ktx:$corektx"

    // Architecture components
    // room
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Lifecycle
    implementation "androidx.lifecycle:lifecycle-extensions:$archLifecycleExtensionsVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$archLifecycleVersion"

    // Retrofit / LeakCanary
    implementation "com.squareup.retrofit2:retrofit:$retrofit2"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2gson"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"


    // Testing
//    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test.ext:junit:$extjunit"
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestImplementation "androidx.test:runner:$testrunner"

    // Resolve conflicts between main and test APK:
    androidTestImplementation "androidx.annotation:annotation:$annotation"

    // Koin
    implementation "io.insert-koin:koin-android:$koin_version"
    // Koin AndroidX Jetpack Compose
    implementation "io.insert-koin:koin-androidx-compose:$koin_version"

    // for compose

    // Integration with activities
    implementation "androidx.activity:activity-compose:$activity_compose"
    // Compose Material Design
    implementation "androidx.compose.material:material:$jetpack_compose"
    // Animations
    implementation "androidx.compose.animation:animation:$jetpack_compose"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$jetpack_compose"
    // Integration with ViewModels
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$viewmodel_compose"
    // Integration with navigation
    implementation "androidx.navigation:navigation-compose:$navigation_compose"
    // Integration with livedata
    implementation "androidx.compose.runtime:runtime:$jetpack_compose"
    implementation "androidx.compose.runtime:runtime-livedata:$jetpack_compose"

    // When using a AppCompat theme
    implementation "com.google.android.material:compose-theme-adapter:$jetpack_compose"
}
